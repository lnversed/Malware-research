#include <Windows.h>
#include <stdio.h>
#include <psapi.h>
#include <winuser.h>
#include <iostream>

using namespace std;

FARPROC messageboxaddr = NULL;
SIZE_T bytesread = 0;
SIZE_T byteswritten = 0;
SIZE_T hookbyteswritten;
char originalopcodes[15] = {0};

int __stdcall HookedMessageBox(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) {
	cout << "Calling from hookedmessagebox!\n";
	cout << "Text: " << (LPCSTR)lpText << "\nCaption: " << (LPCSTR)lpCaption << endl;

	//unpatch
	WriteProcessMemory(GetCurrentProcess(), (LPVOID)messageboxaddr, originalopcodes, sizeof(originalopcodes), &hookbyteswritten);

	return MessageBoxA(NULL, "This message box is invoked AFTER hooking babyyyyy!\n", "fire", NULL);
}

int main(void) {;
	HINSTANCE library = LoadLibraryA("user32.dll");
	SIZE_T bytesread = 0;
	
	MessageBoxA(NULL, "This messagebox is invoked BEFORE hooking!", "title.", MB_OK | MB_ICONWARNING | MB_SERVICE_NOTIFICATION);

	messageboxaddr = GetProcAddress(library, "MessageBoxA");

	if ((ReadProcessMemory(GetCurrentProcess(), messageboxaddr, originalopcodes, sizeof(originalopcodes), &bytesread)) == 0) {
		cout << "ReadProcessMemory failed, aborting...\n" << endl;
		return 1;
	}


	//patch
	void *hookedMessageboxaddr = &HookedMessageBox;

	char patch[15] = { 0 };
	// xor rax, rax;
	memcpy_s(patch, 3, "\x48\x31\xc0", 3);
	// mov rax, hookedMessageboxaddr;
	memcpy_s(patch + 3, 2, "\x48\xb8", 2);
	memcpy_s(patch + 5, 8,&hookedMessageboxaddr, 8);
	// push rax;ret;
	memcpy_s(patch + 13, 2, "\x50\xc3", 2);


	if ((WriteProcessMemory(GetCurrentProcess(), (LPVOID)messageboxaddr, patch, sizeof(patch), &byteswritten)) == 0) {
		cout << "WriteProcesMemory failed, aborting...\n" << endl;
		return 1;
	}
	
	MessageBoxA(NULL, "on", "off", NULL);

	return 0;
}
