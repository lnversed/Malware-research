#include <Windows.h>
#include <stdio.h>


int main(void) {
	HMODULE libraryBase = LoadLibraryA("user32");
	PIMAGE_DOS_HEADER imgDOS = (PIMAGE_DOS_HEADER)libraryBase;
	PIMAGE_NT_HEADERS imgNT = (PIMAGE_NT_HEADERS)((DWORD_PTR)libraryBase + imgDOS->e_lfanew);

	DWORD exportRVA = (DWORD)imgNT->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;
	PIMAGE_EXPORT_DIRECTORY exportDIR = (PIMAGE_EXPORT_DIRECTORY)((DWORD_PTR)libraryBase + exportRVA);

	LPDWORD exportNameAddr = (LPDWORD)((DWORD_PTR)libraryBase + exportDIR->AddressOfNames);
	LPDWORD exportFuncAddr = (LPDWORD)((DWORD_PTR)libraryBase + exportDIR->AddressOfFunctions);
	PSHORT exportOrdinalAddr = (PSHORT)((DWORD_PTR)libraryBase + exportDIR->AddressOfNameOrdinals);
	const char* cmp = "MessageBoxA";
	DWORD_PTR funcAddress = NULL;

	for (int i = 0; i < exportDIR->NumberOfNames; i++) {
		LPDWORD funcName = (LPDWORD)((DWORD_PTR)libraryBase + exportNameAddr[i]);

		if (memcmp(funcName, cmp, 11) == 0) {
			DWORD funcRVA = exportFuncAddr[exportOrdinalAddr[i]];
			funcAddress = (DWORD_PTR)libraryBase + funcRVA;
			printf("Address of %s found!: %p\n", cmp, funcAddress);
			break;
		} 
	}

	if (funcAddress == NULL) {
		printf("Function does not exist in target library!\n");
		return 1;
	}

	typedef HANDLE(NTAPI* customMessageBox)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
	customMessageBox testbox = NULL;

	testbox = (customMessageBox)funcAddress;
	testbox(NULL, "fire", "burn", NULL);

	return 0;
}